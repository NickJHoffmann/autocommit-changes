
name: Autocommit Changed Files
author: kassett
description: Autocommit all files that have changed - or optionally that have been added -- in a repository.

inputs:
  untracked-files:
    default: "false"
    required: false
    description: True allows untracked files to be committed as well.
  commit-message:
    default: "Auto-committing files [skip ci]"
    required: false
    description: The message that will be passed to the Github API during commit.
  github-token:
    default: ""
    required: false
    description: An optional Github token to be passed for committing the files.
  branch:
    required: false
    default: "main"
    description: "The target branch to push to."

outputs:
  sha:
    description: "The new sha of the commit that was created."
    value: ${{ steps.commit.outputs.SHA }}

runs:
  using: composite
  steps:

    - name: Commit
      id: commit
      shell: python
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        BRANCH: ${{ inputs.branch }}
        MESSAGE: ${{ inputs.commit-message }}
        UNTRACKED_FILES: ${{ inputs.untracked-files }}
      run: |
        from subprocess import run
        import os
        import json
        import base64
        
        
        def run_command(command: str):
            return run(args=command, shell=True, capture_output=True, check=True).stdout.decode("utf-8").strip()
        
        
        def get_branch_name():
            return run_command("git rev-parse --abbrev-ref HEAD")
        
        
        BRANCH = os.environ.get("BRANCH", get_branch_name())
        COMMIT_UNTRACKED_FILES = True if os.environ.get("UNTRACKED_FILES", "false") == "true" else False
        MESSAGE = os.environ.get("MESSAGE", "Github Actions Bot [skip ci]")
        
        
        def list_untracked_files():
            output = run_command("git ls-files -o --exclude-standard")
            files = [file for file in output.split("\n") if file != ""]
            return files
        
        
        def list_tracked_files():
            output = run_command("git ls-files -m")
            files = [file for file in output.split("\n") if file != ""]
            return files
        
        
        def get_origin_sha(file: str) -> str:
            output = run_command(f"git rev-parse {BRANCH}:{file}")
            return output
        
        
        def commit_file(file: str, tracked: bool):
            content = base64.b64encode(open(file, "rb").read()).decode("utf-8")
            route = f"/repos/:owner/:repo/contents/{file}"
            command = f"gh api --method PUT {route} --field message=\"{MESSAGE}\" --field branch={BRANCH} --field content=\"{content}\" --field encoding=\"base64\""
            if tracked:
                command += f" --field sha=\"{get_origin_sha(file)}\""
            output = run_command(command)
            output = json.loads(output)
            return output["commit"]["sha"]
        
        
        def commit_files():
            last_commit = ""
            untracked_files = []
            tracked_files = list_tracked_files()
            if COMMIT_UNTRACKED_FILES:
                untracked_files = list_untracked_files()
        
            for tracked_file in tracked_files:
                last_commit = commit_file(tracked_file, True)
        
            for untracked_file in untracked_files:
                last_commit = commit_file(untracked_file, False)
        
            try:
                with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
                    print(f"SHA={last_commit}", file=fh)
            except KeyError:
                print(last_commit)
        
        
        commit_files()
